name: Packages

on:
  push:
    branches: [ test ]

permissions: {} # none

jobs:
  build:
    permissions:
      contents: read # actions/upload-artifact doesn't need contents: write
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        target_arch: [aarch64, arm, i686, x86_64]
      fail-fast: false
    steps:
    - name: Clone repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1000
    - name: Gather build summary
      id: build-info
      run: |
        mkdir -p ./artifacts ./debs
        touch ./debs/.placeholder

        repo="termux-main"
        echo "tcc" > ./built_${repo}_packages.txt

        declare -a packages
        for repo_path in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do
          repo=$(jq --raw-output '.["'${repo_path}'"].name' repo.json)
          if [ -f ./built_${repo}_packages.txt ]; then
            packages="$packages $(cat ./built_${repo}_packages.txt | tr '\n' ' ')"
          fi
        done

        docker='true'
        [ -n "$packages" ] && if grep -qP "(^|\\s)${packages// /($|\\s)|(^|\\s)}($|\\s)" ./scripts/big-pkgs.list; then
          docker='false'
        fi
        echo "docker-build=$docker" >> $GITHUB_OUTPUT
        if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
          # Build local Docker image if setup scripts were changed.
          # Useful for pull requests submitting changes for both build environment and packages.
          if grep -qP '^scripts/(Dockerfile|properties\.sh|setup-android-sdk\.sh|setup-ubuntu\.sh)$' <<< "$CHANGED_FILES"; then
            echo "Detected changes for environment setup scripts. Building custom Docker image now."
            if [ $docker == 'false' ]; then
              echo "Skipping due to building large packages."
              exit 0
            fi
            cd ./scripts
            docker build -t ghcr.io/termux/package-builder:latest .
            cd ..
          fi
        fi

    - name: Lint packages
      run: |
        declare -a package_recipes
        for repo_path in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do
          repo=$(jq --raw-output '.["'${repo_path}'"].name' repo.json)
          if [ -f ./built_${repo}_packages.txt ]; then
            package_recipes="$package_recipes $(cat ./built_${repo}_packages.txt | repo_path=${repo_path} awk '{print ENVIRON["repo_path"]"/"$1"/build.sh"}')"
          fi
        done

        if [ -n "$package_recipes" ]; then
          ./scripts/lint-packages.sh $package_recipes
        fi

    - name: Build packages
      run: |
        declare -a packages
        for repo_path in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do
          repo=$(jq --raw-output '.["'${repo_path}'"].name' repo.json)
          if [ -f ./built_${repo}_packages.txt ]; then
            packages="$packages $(cat ./built_${repo}_packages.txt | tr '\n' ' ')"
          fi
        done

        if [ ${{ steps.build-info.outputs.docker-build }} == 'false' ]; then
          NDK=$ANDROID_NDK ANDROID_HOME=$ANDROID_SDK_ROOT ./build-package.sh -I -a ${{ matrix.target_arch }} $packages
        elif [ -n "$packages" ]; then
          ./scripts/run-docker.sh ./build-package.sh -I -a ${{ matrix.target_arch }} $packages
        fi

    - name: Generate build artifacts
      id: artifact
      if: always()
      run: |
        test -d termux-packages/output && mv termux-packages/output/* ./output/

        for repo in $(jq --raw-output 'del(.pkg_format) | .[].name' repo.json); do
          # Put package lists into directory with *.deb files so they will be transferred to
          # upload job.
          test -f ./built_${repo}_packages.txt && mv ./built_${repo}_packages.txt ./debs/
          test -f ./built_${repo}_subpackages.txt && cat ./built_${repo}_subpackages.txt >> ./debs/built_${repo}_packages.txt \
            && rm ./built_${repo}_subpackages.txt
          test -f ./deleted_${repo}_packages.txt && mv ./deleted_${repo}_packages.txt ./debs/

          # Move only debs from built_packages into debs/ folder before
          # creating an archive.
          while read -r pkg; do
            # Match both $pkg.deb and $pkg-static.deb.
            find output \( -name "$pkg_*.deb" -o -name "$pkg-static_*.deb" \) -type f -print0 | xargs -0r mv -t debs/
          done < <(cat ./debs/built_${repo}_packages.txt)
        done

        # Files containing certain symbols (e.g. ":") will cause failure in actions/upload-artifact.
        # Archiving *.deb files in a tarball to avoid issues with uploading.
        # tar cf artifacts/debs-${{ matrix.target_arch }}-${{ github.sha }}.tar debs

        cd debs
        debfile_1=$(ls tcc*.deb)
        debfile_2=$(echo "$debfile_1" | sed 's/[0-9]://g')
        mv -v $debfile_1 $debfile_2
        cp -v $debfile_2 ../artifacts
        echo "debfile=$debfile_2" >> $GITHUB_OUTPUT

    - name: Checksums for built *.deb files
      if: always()
      run: |
        find debs -type f -name "*.deb" -exec sha256sum "{}" \; | sort -k2
    - name: Store *.deb files
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.artifact.outputs.debfile }}
        path: ./artifacts
